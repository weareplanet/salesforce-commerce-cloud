'use strict';
export {};
let CryptoJS = require("crypto-js");
import { Authentication }  from "./Authentication";

class VoidAuth implements Authentication {

    protected _basePath = '{{{basePath}}}';
    protected configuration : any = {};

    constructor(configuration: any) {
        this.configuration = configuration;
    }

    public getAuthHeaders(method: string, resourcePath: string, queryParams: any) : any {

        if (Object.keys(queryParams).length != 0) {
            resourcePath += '?' + Object.keys(queryParams).map(
                (key) => {
                    return encodeURIComponent(key) + '=' + encodeURIComponent(queryParams[key])
                }
            ).join('&');
        }

        resourcePath = '/api' + resourcePath.split(this._basePath)[1];

        let timestamp: number = {{#supportsES6}}Math.trunc(+new Date / 1000);{{/supportsES6}}{{^supportsES6}}Math.floor(+new Date / 1000);{{/supportsES6}}

        let headers: any = {
            'x-mac-userid': this.configuration.user_id,
            'x-mac-version': this.configuration.mac_version,
            'x-mac-timestamp': timestamp,
            'x-mac-value': this.getSignature(method, resourcePath, timestamp)
        };
        return headers;
    }

    protected getSignature(method: string, resourcePath: string, timestamp: number) : string {
        let data: string = [
            this.configuration.mac_version,
            this.configuration.user_id,
            timestamp,
            method,
            resourcePath
        ].join('|');
        let api_secret_base64 = CryptoJS.enc.Base64.parse(this.configuration.api_secret);
        return CryptoJS.HmacSHA512(data, api_secret_base64).toString(CryptoJS.enc.Base64);
    }

}

module.exports = VoidAuth;
