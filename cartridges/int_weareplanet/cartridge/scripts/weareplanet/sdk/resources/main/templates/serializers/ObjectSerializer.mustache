{{#models}}
{{#model}}let {{classname}} = require("../models/{{classname}}");
{{/model}}
{{/models}}

class ObjectSerializer {

    /* tslint:disable:no-unused-variable */
    static primitives: Array<string> = [
        "string",
        "boolean",
        "double",
        "integer",
        "long",
        "float",
        "number",
        "any"
    ];

    static enumsMap: {[index: string]: any} = {
    {{#models}}
        {{#model}}
            {{#isEnum}}
        "{{classname}}": {{classname}},
            {{/isEnum}}
        {{/model}}
    {{/models}}
    };

    static typeMap: {[index: string]: any} = {
    {{#models}}
        {{#model}}
            {{^isEnum}}
                "{{classname}}": {{classname}},
            {{/isEnum}}
        {{/model}}
    {{/models}}
    };

    public static findCorrectType(data: any, expectedType: string) {
        if (data === undefined) {
            return expectedType;
        } else if (ObjectSerializer.primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (ObjectSerializer.enumsMap[expectedType]) {
                return expectedType;
            }

            if (!ObjectSerializer.typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = ObjectSerializer.typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data === undefined) {
            return data;
        } else if (ObjectSerializer.primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let dataIndex in data) {
                let date = data[dataIndex];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (ObjectSerializer.enumsMap[type]) {
                return data;
            }
            if (!ObjectSerializer.typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = ObjectSerializer.typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let attributeTypesIndex in attributeTypes) {
                let attributeType = attributeTypes[attributeTypesIndex];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data === undefined) {
            return data;
        } else if (ObjectSerializer.primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let dataIndex in data) {
                let date = data[dataIndex];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (ObjectSerializer.enumsMap[type]) {// is Enum
                return data;
            }

            if (!ObjectSerializer.typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new ObjectSerializer.typeMap[type]();
            let attributeTypes = ObjectSerializer.typeMap[type].getAttributeTypeMap();
            for (let attributeTypesIndex in attributeTypes) {
                let attributeType = attributeTypes[attributeTypesIndex];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

module.exports = ObjectSerializer;
export { ObjectSerializer };
